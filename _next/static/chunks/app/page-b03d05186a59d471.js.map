{"version":3,"file":"static/chunks/app/page-b03d05186a59d471.js","mappings":"8EAAA,sCAA0J,uKCc1J,IAAMA,EAAc,IAET,qBAKEC,EAAgC,OAAC,CAC5CC,YAAU,UACVC,CAAQ,SACRC,CAAO,OACPC,CAAK,eACLC,CAAa,SACbC,CAAO,CACR,GAQOC,EAAgB,IACpB,EACc,EADV,KAAU,CACQ,CAAlBH,EAAyB,uBACf,SAAS,CAAnBA,EAA0B,yBACvB,sBAHc,mBAMvB,MACE,UAACI,MAAAA,CAAIC,UAAU,0EACb,WAACD,MAAAA,CAAIC,UAAU,0EACb,WAACD,MAAAA,CAAIC,UAAU,8BACb,UAACC,EAAAA,OAAKA,CAAAA,CACJC,IAAK,GAAiB,OAAdZ,IAAc,mBACtBa,IAAI,gBACJC,MAAO,GACPC,OAAQ,GACRL,UAAU,6BAEZ,UAACM,KAAAA,CAAGN,UAAU,4CAAmC,8BAInD,UAACO,EAAAA,EAAeA,CAAAA,UACd,WAACR,MAAAA,CAAIC,UAAU,0BAA0BQ,KAAK,UAAUC,aAAW,0BAChEjB,GACC,iCACE,WAACkB,EAAAA,EAAWA,CAAAA,WACV,UAACC,EAAAA,EAAcA,CAAAA,CAACC,OAAO,aACrB,UAACC,SAAAA,CACCb,UAAU,sIACVc,QAASrB,EACTgB,aAAW,yBAEX,UAACM,EAAAA,CAAQA,CAAAA,CAACf,UAAU,UAAUgB,cAAY,aAG9C,UAACC,EAAAA,EAAcA,CAAAA,UAAC,qBAKlB,WAACP,EAAAA,EAAWA,CAAAA,WACV,UAACC,EAAAA,EAAcA,CAAAA,CAACC,OAAO,aACrB,UAACC,SAAAA,CACCb,UAAU,6IACVc,QAASpB,EACTe,aAAW,8BAEX,UAACS,EAAAA,CAASA,CAAAA,CAAClB,UAAU,UAAUgB,cAAY,aAG/C,UAACC,EAAAA,EAAcA,CAAAA,UAAC,6BAOtB,WAACP,EAAAA,EAAWA,CAAAA,WACV,UAACC,EAAAA,EAAcA,CAAAA,CAACC,OAAO,aACrB,UAACC,SAAAA,CACCb,UAAU,6IACVc,QAASlB,EACTa,aAAYX,IACZqB,MAAOrB,aAtEhBD,CAwEUuB,CAvED,EADV,KAAU,CACQ,CAAlBzB,EAAyB,UAAC0B,EAAAA,CAAGA,CAAAA,CAACrB,UAAU,YAC9B,SAAS,CAAnBL,EAA0B,UAAC2B,EAAAA,CAAOA,CAAAA,CAACtB,UAAU,YAC1C,UAACuB,EAAAA,CAAIA,CAAAA,CAACvB,UAAU,YAHF,SA2EX,UAACiB,EAAAA,EAAcA,CAAAA,UACZnB,kBAQjB,EAAE,wBC9FK,IAAM0B,EAAgD,OAAC,CAC5DC,YAAU,OACVC,CAAK,QACLC,CAAM,YACNC,CAAU,aACVC,CAAW,CACXC,aAAY,CAAK,CAClB,GACC,MACE,UAACC,EAAAA,EAAIA,CAAAA,CAAC/B,UAAU,kCACd,UAACgC,EAAAA,EAAWA,CAAAA,CAAChC,UAAU,eACrB,WAACD,MAAAA,CACCC,UAAW,yFAEPyB,MAAAA,CADAK,EAAY,iCAAmC,GAAG,kBAKlDJ,MAAAA,CAJAD,EACE,0DACA,6EACH,kBAC4D,OAA3DC,EAAQ,8CAAgD,IAC5DC,OAAQA,EACRC,WAAYA,EACZC,YAAaA,EACbf,QAAS,SAAMmB,SAAwB,QAAxBA,EAAAA,SAASC,cAAc,CAAC,gBAAxBD,KAAAA,MAAAA,KAAAA,EAAAA,EAAuCE,KAAK,IAC3D3B,KAAK,SACL4B,SAAU,EACV3B,aAAW,mCACX4B,WAAY,IACV,GAAc,UAAVC,EAAEC,GAAG,EAA0B,MAAVD,EAAEC,GAAG,CAAU,KACtCN,CAAwB,SAAxBA,EAAAA,SAASC,cAAc,CAAC,gBAAxBD,KAAAA,IAAAA,GAAAA,EAAuCE,KAAK,EAC9C,CACF,YAECL,EACC,UAAC/B,MAAAA,CAAIC,UAAU,+FAEf,UAACwC,QAAAA,CACCC,KAAK,OACLC,GAAG,aACH1C,UAAU,UACV2C,OAAO,OACPC,SAAU,QACKN,EAAb,IAAMO,EAAqB,QAAdP,EAAAA,EAAEQ,MAAM,CAACC,KAAAA,GAATT,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,CAAgB,CAAC,EAAE,CAChC,GAAIO,EAAM,CACR,IAAMG,EAAW,IAAIC,aACrBD,EAASE,KAAK,CAACC,GAAG,CAACN,GAKnBlB,EAJkC,CAChCyB,IAGKC,WAHW,KAAQ,EACxBC,aAAc,CAAEP,MAAOC,EAASD,KAAK,CACvC,EAEF,CACF,EACAtC,aAAW,8BAGf,UAAC8C,EAAAA,CAAMA,CAAAA,CAACvD,UAAU,gEAAgEgB,cAAY,SAC9F,UAACwC,IAAAA,CAAExD,UAAU,qEAA4D,+CAGzE,WAACwD,IAAAA,CAAExD,UAAU,qDAA2C,2BAC9B,UAACyD,OAAAA,UAAK,SAAW,2BAE1C/B,GACC,UAAC8B,IAAAA,CAAExD,UAAU,sCAAsCQ,KAAK,iBAASkB,UAM7E,EAAE,aC9EK,OAAMgC,UAAsBC,EAAAA,SAAe,CAMhD,OAAOC,yBAAyBlC,CAAY,CAAS,CACnD,MAAO,CAAEmC,UAAU,EAAMnC,OAAM,CACjC,CAEAoC,kBAAkBpC,CAAY,CAAEqC,CAA0B,CAAE,CAE1DC,QAAQtC,KAAK,CAAC,4BAA6BA,GAC3CsC,QAAQtC,KAAK,CAAC,cAAeqC,EAC/B,CAEAE,QAAS,CACP,GAAI,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAE,KAIK,EAErB,EALP,MACE,WAAC9D,MAAAA,CAAIC,UAAU,mFACb,UAACmE,KAAAA,CAAGnE,UAAU,sCAA6B,yBAC3C,UAACwD,IAAAA,CAAExD,UAAU,mBAA2B,QAAhB,MAAI,CAACkE,KAAK,CAACxC,KAAAA,GAAX,oBAAkB0C,OAAO,GACjD,UAACC,MAAAA,CAAIrE,UAAU,sCACI,QAAhB,MAAI,CAACkE,KAAK,CAACxC,KAAAA,GAAX,oBAAkB4C,KAAK,KAIhC,CAEA,OAAO,IAAI,CAACC,KAAK,CAACC,QAAQ,CA5B5BC,YAAYF,CAAY,CAAE,CACxB,KAAK,CAACA,GACN,IAAI,CAACL,KAAK,CAAG,CAAEL,UAAU,CAAM,CACjC,CA2BF,CC9BA,IAAMa,EAAgBC,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAC5B,6BAAyB,CAACC,IAAI,CAACC,GAAOA,EAAIH,aAAa,0CACrDI,KAAK,IAGHC,EAAWJ,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACvB,4BAAoB,CAACC,IAAI,CAACC,GAAOA,EAAIG,OAAO,yCAC1CF,IAAK,KAGHG,EAAoBN,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAChC,4BAA6B,CAACC,IAAI,CAACC,GAAOA,EAAII,iBAAiB,yCAC7DH,KAAK,IAgMT,EA7LkC,KAChC,GAAM,CAACtF,EAAY0F,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAsB,MAC5D,CAACzD,EAAO0D,EAAS,CAAGD,CAAAA,CA2LEE,CA3LFF,CA2LG,CA3LHA,QAAAA,CAAQA,CAAgB,MAC5C,CAAC1D,EAAY6D,EAAc,CAAGH,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACvC,CAACI,EAAkBC,EAAoB,CAAGL,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAgB,MAClE,OAAExF,CAAK,UAAE8F,CAAQ,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,GAC9B,CAAC7F,EAAS8F,EAAW,CAAGR,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACjC,CAACrD,EAAW8D,EAAa,CAAGT,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAErCU,EAAaC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,IAC7BxD,EAAEc,cAAc,GAChBkC,GAAc,GACdF,EAAS,MACTQ,GAAa,GAEb,IAAM/C,EAAOP,EAAEgB,YAAY,CAACP,KAAK,CAAC,EAAE,CACpC,GAAI,CAACF,EAAM,CACT+C,GAAa,GACb,MACF,CAQA,GANA5B,QAAQ+B,GAAG,CAAC,wBAAyB,CACnCC,KAAMnD,EAAKmD,IAAI,CACfC,KAAMpD,EAAKoD,IAAI,CACfxD,KAAMI,EAAKJ,IAAI,GAGb,CAACI,EAAKmD,IAAI,CAACE,QAAQ,CAAC,QAAS,CAC/Bd,EAAS,oDACTQ,EAAa,IACb,MACF,CAEAJ,EAAoB3C,EAAKmD,IAAI,EAE7B,IAAMG,EAAS,IAAIC,WACnBD,EAAOE,MAAM,CAAG,IACd,GAAI,KACkChD,EAAAA,EACLA,EAD/BW,QAAQ+B,GAAG,CAAC,+BAAwB1C,EAAAA,EAAMP,MAAAA,GAANO,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,QAAAA,EAAAA,EAAciD,MAAAA,GAAdjD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsBkD,QAAQ,GAAGC,MAAM,EAC3E,IAAMC,EAASC,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAAAA,QAACrD,EAAAA,EAAMP,MAAAA,GAANO,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAciD,MAAM,EACnDpB,EAAcuB,EAChB,CAAE,MAAOE,EAAK,CACZ3C,QAAQtC,KAAK,CAAC,4BAA6BiF,GAC3CvB,EAASuB,aAAeC,MAAQD,EAAIvC,OAAO,CAAG,uBAChD,QAAU,CACRwB,GAAa,EACf,CACF,EAEAO,EAAOU,OAAO,CAAG,IACf7C,QAAQtC,KAAK,CAAC,oBAAqBA,GACnC0D,EAAS,sBACTQ,GAAa,EACf,EAEAO,EAAOW,UAAU,CAACjE,EACpB,EAAG,EAAE,EAECkE,EAAiBjB,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,IACjCxD,EAAEc,cAAc,GAChBkC,GAAc,EAChB,EAAG,EAAE,EAEC0B,EAAkBlB,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,IAClCxD,EAAEc,cAAc,GAChBkC,GAAc,EAChB,EAAG,EAAE,EAEC2B,EAAcnB,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,KAC9B,GAAI,CAACtG,EAAY,OAEjB,IAAM0H,EAAiB3B,EACnBA,EAAiB4B,OAAO,CAAC,gBAAiB,QAC1C,oBAkDEC,EAAO,IAAIC,KAAK,CAFH,CA9CH,6FAWU7H,EAAW8H,KAAK,CAACC,OAAO,CAAC,IACjD,IAAMC,EAAgBhI,EAAWiI,OAAO,CAACC,MAAM,CAAC,GAAoBC,EAAOC,YAAY,GAAKC,EAAKnF,EAAE,SAEnG,EAAkB8D,MAAM,CAAG,EAClBgB,CADqB,CACPM,GAAG,CAAC,GAAoB,CAC3CD,EAAK7B,IAAI,CACT6B,EAAKnF,EAAE,CACPiF,EAAO3B,IAAI,CACX2B,EAAOI,QAAQ,CACfJ,EAAOK,YAAY,CACnBL,EAAOM,QAAQ,CACfN,EAAOO,SAAS,CAChBP,EAAOQ,UAAU,CAClB,CAACL,GAAG,CAACM,GAAS,IAAgB,OAAZA,GAAS,GAAG,MAAIC,IAAI,CAAC,MAGnC,CAAC,CACNR,EAAK7B,IAAI,CACT6B,EAAKnF,EAAE,CACP,GAAI,GAAI,GAAI,GAAI,GAAI,GACrB,CAACoF,GAAG,CAACM,GAAS,IAAgB,OAAZA,GAAS,GAAG,MAAIC,IAAI,CAAC,KAAK,MAGnB7I,EAAWiI,OAAO,CAC3CC,MAAM,CAAC,GAA4C,OAAxBC,EAAOC,YAAY,EAC9CE,GAAG,CAAC,GAAoB,CACvB,GAAI,GACJH,EAAO3B,IAAI,CACX2B,EAAOI,QAAQ,CACfJ,EAAOK,YAAY,CACnBL,EAAOM,QAAQ,CACfN,EAAOO,SAAS,CAChBP,EAAOQ,UAAU,CAClB,CAACL,GAAG,CAACM,GAAS,IAAgB,OAAZA,GAAS,GAAG,MAAIC,IAAI,CAAC,MAEgC,CAACA,IAAI,CAAC,MAE9C,CAAE,CAAE5F,KAAM,yBAA0B,GAChE6F,EAAOrG,SAASsG,aAAa,CAAC,KAC9BC,EAAMC,IAAIC,eAAe,CAACtB,GAChCkB,EAAKK,YAAY,CAAC,OAAQH,GAC1BF,EAAKK,YAAY,CAAC,WAAYzB,GAC9BoB,EAAKM,KAAK,CAACC,UAAU,CAAG,SACxB5G,SAAS6G,IAAI,CAACC,WAAW,CAACT,GAC1BA,EAAKnG,KAAK,GACVF,SAAS6G,IAAI,CAACE,WAAW,CAACV,EAC5B,EAAG,CAAC9I,EAAY+F,EAAiB,QAEjC0D,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACRtD,GAAW,EACb,EAAG,EAAE,EASH,WAAC5F,MAAAA,CAAIC,UAAU,aAAaQ,KAAK,iBAC/B,UAACjB,EAAMA,CACLC,GADKD,QACOC,EACZC,SAAUwH,EACVvH,QAAS,KACPwF,EAAc,MACdE,EAAS,KACX,EACAzF,MAAOA,EACPC,cAhBoB,CAgBLsJ,IAfL,SAAVvJ,EAAkB8F,EAAS,SACZ,UAAV9F,EAAmB8F,EAAS,UAChCA,EAAS,OAChB,EAaM5F,QAASA,IAEX,UAAC6D,EAAaA,UACZ,UAAC3D,MAAAA,CAAIC,UAAU,uCACZ,EAUC,WAACD,MAAAA,CAAIC,UAAU,sBACb,UAAC0E,EAAAA,CAAcyE,WAAY3J,EAAW2J,UAAU,GAE/C3J,EAAW8H,KAAK,CAACQ,GAAG,CAACD,GACpB,UAAC9C,EAAAA,CAEC8C,KAAMA,EACNJ,QAASjI,EAAWiI,OAAO,EAFtBI,EAAKnF,EAAE,GAMhB,UAACuC,EAAAA,CAAkBwC,QAASjI,EAAWiI,OAAO,MApBhD,UAACjG,EAAcA,CACbC,WADaD,EAEbE,MAAOA,EACPC,OAAQkE,EACRjE,WAAYmF,EACZlF,YAAamF,EACblF,UAAWA,UAqBzB,8GCnNA,IAAMC,EAAO4B,EAAAA,UAAgB,CAC3B,GAA0ByF,QAAzB,WAAEpJ,CAAS,CAAE,GAAGuE,EAAO,SACtB,UAACxE,MAAAA,CACCqJ,IAAKA,EACLpJ,UAAWqJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAEA,CAAC,2DAA4DrJ,GACzE,GAAGuE,CAAK,KAIfxC,EAAKuH,WAAW,CAAG,OAEnB,IAAMC,EAAa5F,EAAAA,UAAgB,CACjC,GAA0ByF,QAAzB,WAAEpJ,CAAS,CAAE,GAAGuE,EAAO,SACtB,UAACxE,MAAAA,CACCqJ,IAAKA,EACLpJ,UAAWqJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAEA,CAAC,gCAAiCrJ,GAC9C,GAAGuE,CAAK,KAIfgF,EAAWD,WAAW,CAAG,aAEzB,IAAME,EAAY7F,EAAAA,UAAgB,CAChC,GAA0ByF,QAAzB,WAAEpJ,CAAS,CAAE,GAAGuE,EAAO,SACtB,UAACkF,KAAAA,CACCL,IAAKA,EACLpJ,UAAWqJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAEA,CAAC,qDAAsDrJ,GACnE,GAAGuE,CAAK,KAIfiF,EAAUF,WAAW,CAAG,YAExB,IAAMtH,EAAc2B,EAAAA,UAAgB,CAClC,GAA0ByF,QAAzB,WAAEpJ,CAAS,CAAE,GAAGuE,EAAO,SACtB,UAACxE,MAAAA,CAAIqJ,IAAKA,EAAKpJ,UAAWqJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAEA,CAAC,WAAYrJ,GAAa,GAAGuE,CAAK,KAGlEvC,EAAYsH,WAAW,CAAG,oICnC1B,IAAM/I,EAAkBmJ,EAAAA,EAAyB,CAC3ChJ,EAAcgJ,EAAAA,EAAqB,CACnC/I,EAAiB+I,EAAAA,EAAwB,CAMzCzI,EAAiB0C,EAAAA,UAAgB,CAGrC,GAA0CyF,QAAzC,WAAEpJ,CAAS,YAAE2J,EAAa,CAAC,CAAE,GAAGpF,EAAO,SACxC,UAACmF,EAAAA,EAAwB,EACvBN,IAAKA,EACLO,WAAYA,EACZ3J,UAAWqJ,CAAAA,EAAAA,EAAAA,EAAAA,CAAEA,CACX,0WACArJ,GAED,GAAGuE,CAAK,KAGbtD,EAAeqI,WAAW,CAAGI,EAAAA,EAAwB,CAACJ,WAAW,+GC5B1D,IAAMM,EAAsB,IAAI,EAEX,CAC1B,IAAK,gBACL,IAAK,yBACL,IAAK,0BACL,IAAK,mCACL,IAAK,+BACL,IAAK,wCACL,IAAK,mBACL,IAAK,iBACL,IAAK,iBACL,IAAK,iBACL,IAAK,gBACL,IAAK,qBACL,IAAK,qBACL,IAAK,qBACL,IAAK,qBACL,IAAK,qBACL,IAAK,mBACL,IAAK,gCACL,IAAK,oBACL,IAAK,iCACL,IAAK,eACL,IAAK,eACL,IAAK,mBACL,IAAK,mBACL,IAAK,mBACL,IAAK,0BACL,IAAK,0BACL,IAAK,iBACL,IAAK,kBACL,IAAK,aACL,IAAK,cACL,IAAK,kBACL,IAAK,kBACL,IAAK,kBACL,IAAK,oBACL,IAAK,gBACP,EAAW,EAEe,CACxB,EAAG,WACH,EAAG,YACH,EAAG,QACH,EAAG,WACL,EAAW,EAEiB,CAC1B,EAAG,iBACH,EAAG,wBACH,EAAG,gBACH,EAAG,OACL,EAAW,EAEkB,CAC3B,EAAG,SACH,EAAG,WACH,EAAG,eACH,EAAG,aACH,EAAG,YACH,EAAG,YACH,EAAG,eACH,EAAG,WACL,EAEaC,EAAa,CACxB,EAAG,WACH,EAAG,eACH,EAAG,YACH,EAAG,cACL,EAAW,EAEsB,CAC/B,OACA,WACA,mBACA,mBACA,kBACD,CAEYC,EAAiB,CAC5BC,aAAc,uCACdC,aAAc,eACdC,gBAAiB,qBACjBC,oBAAqB,sBACrBC,aAAc,eACdC,cAAe,eACjB,EAAW,+EChFJ,SAASf,IAAG,kDAAGgB,CAAAA,CAAH,eAAuB,CACxC,MAAOC,CAAAA,EAAAA,EAAAA,EAAAA,CAAOA,CAACC,CAAAA,EAAAA,EAAAA,CAAAA,CAAIA,CAACF,GACtB,CAKO,IAAMG,EAA0B,IACrC,GAAI,CAACC,GAGD,CADY,4CACHC,IAAI,CAACD,GAHD,MAAO,GAKxB,CAF+B,EAEzB,CAACE,EAAUC,EAFqB,CAETH,EAAWI,KAAK,CAAC,KACxC,CAACC,EAAKC,EAAOC,EAAK,CAAGL,EAASE,KAAK,CAAC,KAAK/C,GAAG,CAACmD,QAC7C,CAACC,EAAOC,EAASC,EAAQ,CAAGR,EAASC,KAAK,CAAC,KAAK/C,GAAG,CAACmD,QAG1D,OACEF,GAAS,GAAKA,GAAS,IACvBD,GAAO,GAAKA,GAAO,IACnBE,GAAQ,MACRE,GAAS,GAAKA,GAAS,IACvBC,GAAW,GAAKA,GAAW,IAC3BC,GAAW,GAAKA,GAAW,EAE/B,EAAE,gFCdK,IAAMC,EAAoB,GACxBC,EAAAA,EAAY,CAACC,EAAoC,EAAIzB,EAAAA,EAAcA,CAACI,mBAAmB,CA2I1FsB,EAAmB,IACvB,GAAI,CAEF,GAAM,CAACb,EAAUC,EAAS,CAAGH,EAAWI,KAAK,CAAC,KACxC,CAACC,EAAKC,EAAOC,EAAK,CAAGL,EAASE,KAAK,CAAC,KACpC,CAACK,EAAOC,EAASC,EAAQ,CAAGR,EAASC,KAAK,CAAC,KAG3CY,EAAO,IAAIC,KACfC,SAASX,GACTW,SAASZ,GAAS,EAClBY,SAASb,GACTa,SAAST,GACTS,SAASR,GACTQ,SAASP,IAIX,GAAIQ,MAAMH,EAAKI,OAAO,IAEpB,CAFyB,MACzB7H,QAAQtC,KAAK,CAAC,6BAA8B+I,GACrCX,EAAAA,EAAcA,CAACE,YAAY,CAIpC,OAAOyB,EAAKK,kBAAkB,CAAC,QAAS,CACtCd,KAAM,UACND,MAAO,QACPD,IAAK,UACLiB,KAAM,UACNC,OAAQ,UACRC,QAAQ,CACV,GAAG9E,OAAO,CAAC,IAAK,GAElB,CAAE,MAAOzF,EAAO,CAEd,OADAsC,QAAQtC,KAAK,CAAC,yBAA0BA,EAAO,SAAU+I,GAClDX,EAAAA,EAAcA,CAACE,YAAY,CAEtC,EAIakC,EAAkB,GAMtBC,CALY,CACjB,CAAC,CAAC,EAAE,CAAE,MACN,EAAG,SACH,EAAG,OACL,CACiB,CAACC,EAAoC,EAAI,SAGrD,SAAS1F,EAAgB2F,CAAmB,EACjD,GAAI,KAqBuBC,EACDA,EAWAA,EACFA,EACCA,EAKRA,EAAAA,EAKcA,EAGFA,EAGwBA,EAIjDA,EACAA,EAIAA,EAEAA,EA7DF,IAAMA,EAAOC,KAAKC,KAAK,CAACH,GAalBI,EAAgBC,EAAAA,EAAiBA,CAAChF,MAAM,CAACU,QAAUkE,QAAD,UAACA,EAAAA,EAAKK,QAAAA,GAALL,KAAAA,MAAAA,KAAAA,EAAAA,CAAe,CAAClE,EAAAA,IACzE,GAAIqE,EAAcjG,MAAM,CAAG,EAEzB,CAF4B,KAC5BxC,QAAQtC,KAAK,CAAC,2BAA4B+K,GACpC,MAAU,wCAIlB,IAAMG,EAAmBN,CAAa,QAAbA,EAAAA,EAAKK,QAAAA,GAALL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAeM,gBAAAA,GAAoB,GACtDC,EAAkBP,CAAAA,QAAAA,EAAAA,EAAKK,QAAAA,GAALL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAeO,eAAAA,GAAmB,GAErDrC,CAAAA,EAAAA,EAAAA,CAAAA,CAAuBA,CAACoC,IAC3B5I,QAAQ8I,IAAI,CAAC,EADiC,iCACGF,GAE9CpC,CAAAA,EAAAA,EAAAA,CAAAA,CAAuBA,CAACqC,IAC3B7I,QAAQ8I,IAAI,CAAC,CADgC,iCACGD,GAIlD,IAAM1D,EAA6B,CACjC,qBAAsBmD,CAAa,QAAbA,EAAAA,EAAKK,QAAQ,GAAbL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAeS,IAAAA,GAAQ,UAC7C,mBAAoBT,CAAAA,QAAAA,EAAAA,EAAKK,QAAAA,GAALL,KAAAA,MAAAA,KAAAA,EAAAA,EAAeU,QAAAA,GAAY,UAC/C,oBAAqBV,CAAAA,QAAAA,EAAAA,EAAKK,QAAQ,GAAbL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAeW,gBAAAA,GAAoB,UACxD,mBAAoBzB,EAAiBoB,GAAoB,gBACzD,mBAAoBpB,EAAiBqB,GAAmB,gBACxD,qBAAsB,EACtB3I,MAAO,CACLgJ,UAAWZ,QAAAA,EAAAA,OAAAA,GAAAA,EAAKa,KAAAA,GAALb,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAYY,SAAS,GAArBZ,KAAAA,IAAAA,EAAAA,EAAyB,CACtC,CACF,EAGMc,EAASC,EAAcf,QAAAA,EAAAA,EAAKgB,MAAAA,GAALhB,KAAAA,MAAAA,EAAe,CAAC,GAGvChF,EAAQiG,EAAajB,QAAAA,EAAAA,EAAKkB,KAAAA,GAALlB,KAAAA,IAAAA,EAAAA,EAAc,CAAC,EAAGc,GAGvCK,EAAoBC,EAAyBpB,QAAAA,EAAAA,EAAKqB,OAAAA,GAALrB,KAAAA,IAAAA,EAAAA,EAAgB,CAAC,GAG9DsB,EAAiBC,EACrBvB,QAAAA,EAAAA,EAAKqB,OAAAA,GAALrB,KAAAA,IAAAA,EAAAA,EAAgB,CAAC,EACL,QAAZA,EAAAA,EAAKwB,OAAAA,GAALxB,KAAAA,IAAAA,EAAAA,EAAgB,CAAC,EACjBmB,GAEIM,EAAkBC,EACtB1B,QAAAA,EAAAA,EAAK2B,eAAAA,GAAL3B,KAAAA,MAAAA,EAAwB,CAAC,EACzBmB,EACAnB,OAAAA,GAAAA,EAAK4B,UAAAA,GAAL5B,KAAAA,IAAAA,EAAAA,EAAmB,CAAC,GAIhB7E,EAAU,IAAImG,KAAmBG,EAAgB,CAKvD,OAFA5E,CAAU,CAAC,qBAAqB,CAAG1B,EAAQC,MAAM,CAACC,GAAkC,OAAxBA,EAAOC,YAAY,EAAWpB,MAAM,CAEzF,YAAE2C,QAAY7B,UAAOG,CAAQ,CACtC,CAAE,MAAO/F,EAAgB,CAKvB,GAHAsC,QAAQtC,KAAK,CAAC,6BAA8BA,GAC5CsC,QAAQtC,KAAK,CAAC,wBAAyB2K,EAAY8B,SAAS,CAAC,EAAG,KAAO,OAEnEzM,aAAiBkF,MACnB,CAD0B,KACpB,MAAU,gCAA8C,OAAdlF,EAAM0C,OAAO,EAE/D,OAAM,MAAU,8BAClB,CACF,CAEA,IAAMiJ,EAAgB,IACpB,IAAMe,EAAY,IAAIC,IAatB,OAXAC,OAAOC,OAAO,CAACnB,GACZ1F,MAAM,CAAC,OAAC,CAACnF,EAAI,SAAa,SAARA,GAAkBA,cACpCiM,OAAO,CAAC,QAKElC,KALD,CAAC5J,EAAI+L,EAAU,GAEvBL,EAAUM,GAAG,CAAChM,EAAI,IAChBA,EACAsD,KAAMsG,EAAKS,IAAI,CACf4B,MAAOrC,CAAAA,QAAAA,EAJImC,EAICG,KAAAA,GAALtC,KAAAA,MAAAA,KAAAA,EAAAA,EAAY/F,QAAQ,KAAM,GACnC,EACF,GAEK6H,CACT,EAEMS,EAAqB,QAGtBvC,EAEAA,EAHH,GAAI,EAAMwC,WAAW,EACnB,SAACxC,EAAAA,EAAKyC,eAAAA,GAALzC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsB0C,OAAAA,GACtB,gBAAoB,EAAgD,IAA5CV,EACzB,KADgCW,IAAI,CAAC3C,EAAK4C,cAAc,EAAE1I,MAAM,EAChE,SAAC8F,EAAAA,EAAKK,QAAAA,GAALL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAe6C,OAAO,GACtB,EAAMC,QAAQ,EAA6B,IAAzB9C,EAAK8C,QAAQ,CAAC5I,MAAM,CAIzC,MAAO,CACLsI,YAAaxC,EAAKwC,WAAW,CAC7BC,gBAAiBzC,EAAKyC,eAAe,EAAI,CACvCC,QAAS1C,EAAKyC,eAAe,CAACC,OAAO,EAGvC,GAAI1C,EAAK4C,cAAc,EAAIZ,OAAOW,IAAI,CAAC3C,EAAK4C,cAAc,EAAE1I,MAAM,CAAG,GAAK,CACxE0I,eAAgB5C,EAAK4C,cAAc,CACpC,CACD,GAAI5C,EAAKK,QAAQ,EAAI,CACnBA,SAAUL,EAAKK,QACjB,CAAC,CACD,GAAIL,EAAK8C,QAAQ,EAAI9C,EAAK8C,QAAQ,CAAC5I,MAAM,CAAG,GAAK,CAC/C4I,SAAU9C,EAAK8C,QAAQ,CACxB,CAEL,EAEM7B,EAAe,CACnBjG,EACA8F,IAEOkB,OAAOC,OAAO,CAACjH,GACnBI,MAAM,CAAC,OAAC,CAACnF,EAAI,SAAKA,YAA0B,UAARA,IACpCuF,GAAG,CAAC,OAAC,CAACpF,EAAI2M,EAAS,GAGZC,EAA0C,EAAE,CAgClD,OA9BIhD,EAAKiD,QAAQ,EAAE,OACVhB,OAAO,CAACjC,EAAKiD,QAAQ,EACzB7H,MAAM,CAAC,OAAC,CAACnF,EAAI,SAAa,SAARA,IAClBiM,OAAO,CAAC,OAAC,CAACgB,EAAYC,EAAY,GAC3BC,EAAaD,EAAYE,MAAM,CACrC,GAAID,GAAcA,EAAWE,IAAI,EAAIF,EAAWG,EAAE,CAAE,KAI/CvI,EACD8F,EAWQqC,EAAAA,EAfV,IAAMK,EAAWJ,EAAWG,EAAE,CAACtJ,QAAQ,GACjCwJ,EAA6B,IAApBL,EAAWE,IAAI,CACxBI,EAAaD,EACjB,CAAgB,QAAfzI,EAAAA,CAAK,CAACwI,EAAAA,GAANxI,KAAAA,IAAAA,EAAAA,KAAAA,EAAD,EAAkCyF,IAAAA,GAAQ,eAC1CK,CAAW0C,QAAX1C,EAAAA,EAAO6C,GAAG,CAACH,EAAAA,GAAX1C,KAAAA,MAAAA,KAAAA,EAAAA,EAAsBpH,IAAAA,GAAQ,gBAEhCsJ,EAAmBY,IAAI,CAAC,CACtBzN,KAAMsN,EAAS,OAAS,QACxBrN,GAAIoN,EACJ9J,KAAMgK,EACNG,cAAexE,SAAS6D,GACxBY,SAAUX,EAAYY,QAAQ,CAC9BC,WAAYb,EAAYc,UAAU,CAClCC,YAAaf,EAAYgB,WAAW,CACpCC,YAAoC,IAAvBjB,EAAYkB,MAAM,CAC/BC,OAAQnB,QAAAA,EAAiB,QAAjBA,EAAAA,EAAYoB,KAAK,GAAjBpB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmBqB,KAAAA,GAAnBrB,KAAAA,IAAAA,EAAAA,EAA4B,EACpCsB,UAAWtB,EAAYsB,SAAS,CAChCC,SAAUvB,EAAYwB,QAAQ,CAC9B7E,SAAUqD,EAAYyB,QAAQ,EAElC,CACF,GAGG,CACLxO,KACAsD,KAAMsG,EAAKS,IAAI,CACf4B,MAAOrC,EAAKsC,KAAK,CACjBnH,QAAS,EAAE,CACX6H,mBAAoBA,EAAmB9I,MAAM,CAAG,EAAI8I,OAAqB6B,EACzEC,QAASvC,EAxCEQ,EAyCb,CACF,GAGE3B,EAA2B,IAG/B,IAAM2D,CAR4B/E,CAQa,CAAC,EAiBhD,OAdAgC,OAAOC,OAAO,CAAC9G,GACZC,MAAM,CAAC,OAAC,CAACnF,EAAI,SAAa,SAARA,GAA0B,UAARA,IACpCiM,OAAO,CAAC,OAAC,CAAC8C,EAAUC,EAAW,EAE1BjF,GAAKkF,MAAM,EAAyB,GAAG,CAAxBlF,EAAKkF,MAAM,CAAC5B,IAAI,GAGjCyB,CAAW,CAACC,EAAS,CAAGhF,EAAKkF,MAAM,CAAC3B,EAAE,CAACtJ,QAAQ,GAG/C8K,CAAW,CAACI,EADmBC,KAAK,CAAC,CAAC,GACZ,CAAGpF,EAAKkF,MAAM,CAAC3B,EAAE,CAACtJ,QAAQ,GAExD,GAEK8K,CACT,EAEMxD,EAAiB,CACrBpG,EACAkK,EACAlE,KAGA,IAAMmE,EAAe,IAAIvD,IAUzB,OATAC,OAAOC,OAAO,CAAC9G,GACZC,MAAM,CAAC,OAAC,CAACnF,EAAI,SAAa,SAARA,GAA0B,UAARA,IACpCiM,OAAO,CAAC,OAAC,EAAG+C,EAAW,EAElBjF,GAAKnE,UAAU,EAAE,EACNuG,GAAG,CAACpC,EAAKnE,UAAU,CAAEmE,EAAKuF,UAAU,CAErD,GAEKvD,OAAOC,OAAO,CAACoD,GACnBjK,MAAM,CAAC,OAAC,CAACnF,EAAI,SAAKA,YAA0B,UAARA,IACpCuF,GAAG,CAAC,QAiBW8J,KAjBV,CAACzJ,EAAYoJ,EAAW,GAEtBE,EAAgBtJ,EACnB0C,KAAK,CAAC,KACN6G,KAAK,CAAC,CAAC,GACPrJ,IAAI,CAAC,IACLyJ,WAAW,GAEd,MAAO,CACL9L,KAAMsG,EAAKS,IAAI,CACfgF,WAAYzF,EAAKyF,UAAU,CAC3BhK,SAAUsD,EAAkBiB,EAAKyF,UAAU,EAC3C/J,aAAcsE,EAAKtE,YAAY,CAC/BC,SAAUqE,EAAK0F,YAAY,CAC3B9J,UAAWoE,EAAK2F,SAAS,CACzB9J,WAAYmE,EAAKnE,UAAU,CAC3BP,aAAc6F,CAAiB,CAACgE,EAAc,EAAI,KAClDI,WAAYD,QAAAA,EAAAA,EAAa3B,GAAG,CAAC3D,EAAKnE,WAAU,GAAhCyJ,KAAAA,IAAAA,EAAAA,EAAqC,CACnD,CACF,EACJ,EAEMM,EAAuB,IAG3B,IAAMC,EAAa,IAAI9D,iBAElB+D,EAAAA,KAAAA,EAAAA,EAAYnD,IAAAA,GAAM,KAAlBmD,EAEE7D,OAAO,CAAC6D,GACZ1K,MAAM,CAAC,OAAC,CAACnF,EAAI,SAAa,SAARA,IAClBiM,OAAO,CAAC,OAAC,EAAG+C,EAAW,EAElBjF,CADSiF,EACJD,QAAQ,EAAIhF,EAAKtE,YAAY,EAAE,EAC3B0G,GAAG,CAACpC,EAAKgF,QAAQ,CAAE,CAC5BtJ,aAAcsE,EAAKtE,YAAY,CAACzB,QAAQ,GACxC0B,SAAUqE,EAAK0F,YAAY,EAAIpI,EAAAA,EAAmBA,EAGxD,GAZ4BuI,CAehC,EAEMnE,EAAyB,CAC7BqE,EACA5E,EACA2E,KAEA,GAAI,QAACC,EAAAA,KAAAA,EAAAA,EAAiBpD,IAAAA,EAAM,MAAO,EAAE,CAGrC,EAHKoD,EAGCC,EAAgBJ,EAAqBE,GAE3C,OAAO9D,OAAOC,OAAO,CAAC8D,GACnB3K,MAAM,CAAC,OAAC,CAACnF,EAAI,SAAa,SAARA,IAClBuF,GAAG,CAAC,QAmBWwE,EAAAA,KAnBV,CAACgF,EAAUC,EAAW,GAI1B,GAAI,CAACjF,EAAKS,IAAI,EAAI,CAACT,EAAKyF,UAAU,CAEhC,CAFkC,MAClC/N,QAAQ8I,IAAI,CAAC,4BAAqC,OAATwE,EAAS,kCAC3C,KAIT,IAAMiB,EAAiBD,EAAcrC,GAAG,CAACqB,GAEzC,MAAO,CACLtL,KAAMsG,EAAKS,IAAI,CACfgF,WAAYzF,EAAKyF,UAAU,CAC3BhK,SAAUsD,EAdCkG,EAcsBQ,UAAU,EAC3C/J,aAAcuK,SAAAA,KAAAA,EAAAA,EAAgBvK,SAAhBuK,GAAgBvK,GAAgB4B,EAAAA,EAAmBA,CACjE3B,SAAUsK,OAAAA,EAAAA,KAAAA,EAAAA,EAAgBtK,QAAAA,GAAY2B,EAAAA,EAAmBA,CAA/C2I,UACC3I,EAAAA,EAAmBA,CAC9BzB,WAAYmE,QAAAA,EAAa,QAAbA,EAAAA,EAAKkG,QAAAA,GAALlG,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAemG,IAAAA,GAAfnG,KAAAA,IAAAA,EAAAA,EAAuBgF,EACnC1J,aAAc6F,CAAiB,CAAC6D,EAAS,EAAI,IAC/C,CACF,GACC5J,MAAM,CAAC,GAAyC,OAAXC,EAC1C","sources":["webpack://_N_E/?a755","webpack://_N_E/./src/components/Header.tsx","webpack://_N_E/./src/components/FileUploadArea.tsx","webpack://_N_E/./src/components/ErrorBoundary.tsx","webpack://_N_E/./src/components/ConfigParserApp.tsx","webpack://_N_E/./src/components/ui/card.tsx","webpack://_N_E/./src/components/ui/tooltip.tsx","webpack://_N_E/./src/constants/index.ts","webpack://_N_E/./src/lib/utils.ts","webpack://_N_E/./src/services/configParser.ts"],"sourcesContent":["import(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"/home/runner/work/ggo-config-parser/ggo-config-parser/src/components/ConfigParserApp.tsx\");\n","import { FileDown, RotateCcw, Sun, Moon, SunMoon } from 'lucide-react';\nimport { TooltipProvider, TooltipRoot, TooltipTrigger, TooltipContent } from '@/components/ui/tooltip';\nimport { ParsedConfig } from '@/types/config';\nimport Image from 'next/image';\n\ninterface HeaderProps {\n  parsedData: ParsedConfig | null;\n  onExport: () => void;\n  onReset: () => void;\n  theme: string | undefined;\n  onThemeChange: () => void;\n  mounted: boolean;\n}\n\nconst getBasePath = () => {\n  if (process.env.NODE_ENV === 'production') {\n    return '/ggo-config-parser';\n  }\n  return '';\n};\n\nexport const Header: React.FC<HeaderProps> = ({\n  parsedData,\n  onExport,\n  onReset,\n  theme,\n  onThemeChange,\n  mounted\n}) => {\n  const getThemeIcon = () => {\n    if (!mounted) return null;\n    if (theme === 'dark') return <Sun className=\"w-5 h-5\" />;\n    if (theme === 'light') return <SunMoon className=\"w-5 h-5\" />;\n    return <Moon className=\"w-5 h-5\" />;\n  };\n\n  const getThemeLabel = () => {\n    if (!mounted) return 'Loading theme...';\n    if (theme === 'dark') return 'Switch to light mode';\n    if (theme === 'light') return 'Switch to system theme';\n    return 'Switch to dark mode';\n  };\n\n  return (\n    <div className=\"sticky top-0 z-10 bg-emerald-600 dark:bg-emerald-800 shadow-md\">\n      <div className=\"max-w-7xl mx-auto px-4 py-3 flex justify-between items-center\">\n        <div className=\"flex items-center\">\n          <Image\n            src={`${getBasePath()}/logo-plain.svg`}\n            alt=\"Green-GO Logo\"\n            width={32}\n            height={32}\n            className=\"mr-2 brightness-0 invert\"\n          />\n          <h1 className=\"text-white text-xl font-semibold\">\n            Green-GO Config Parser\n          </h1>\n        </div>\n        <TooltipProvider>\n          <div className=\"flex items-center gap-3\" role=\"toolbar\" aria-label=\"Main controls\">\n            {parsedData && (\n              <>\n                <TooltipRoot>\n                  <TooltipTrigger asChild>\n                    <button\n                      className=\"p-2 bg-white dark:bg-gray-200 text-emerald-700 rounded-md hover:bg-emerald-50 dark:hover:bg-gray-300 transition-colors duration-200\"\n                      onClick={onExport}\n                      aria-label=\"Export to CSV\"\n                    >\n                      <FileDown className=\"w-5 h-5\" aria-hidden=\"true\" />\n                    </button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    Export to CSV\n                  </TooltipContent>\n                </TooltipRoot>\n\n                <TooltipRoot>\n                  <TooltipTrigger asChild>\n                    <button\n                      className=\"p-2 bg-emerald-700 dark:bg-emerald-900 text-white rounded-md hover:bg-emerald-800 dark:hover:bg-emerald-950 transition-colors duration-200\"\n                      onClick={onReset}\n                      aria-label=\"Parse another file\"\n                    >\n                      <RotateCcw className=\"w-5 h-5\" aria-hidden=\"true\" />\n                    </button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    Parse another file\n                  </TooltipContent>\n                </TooltipRoot>\n              </>\n            )}\n\n            <TooltipRoot>\n              <TooltipTrigger asChild>\n                <button\n                  className=\"p-2 bg-emerald-700 dark:bg-emerald-900 text-white rounded-md hover:bg-emerald-800 dark:hover:bg-emerald-950 transition-colors duration-200\"\n                  onClick={onThemeChange}\n                  aria-label={getThemeLabel()}\n                  title={getThemeLabel()}\n                >\n                  {getThemeIcon()}\n                </button>\n              </TooltipTrigger>\n              <TooltipContent>\n                {getThemeLabel()}\n              </TooltipContent>\n            </TooltipRoot>\n          </div>\n        </TooltipProvider>\n      </div>\n    </div>\n  );\n}; ","import { Upload } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\n\ninterface FileUploadAreaProps {\n  isDragging: boolean;\n  error: string | null;\n  onDrop: (e: React.DragEvent<HTMLDivElement>) => void;\n  onDragOver: (e: React.DragEvent<HTMLDivElement>) => void;\n  onDragLeave: (e: React.DragEvent<HTMLDivElement>) => void;\n  isLoading?: boolean;\n}\n\n// Create a custom type for the simulated drag event\ntype SimulatedDragEvent = {\n  preventDefault: () => void;\n  dataTransfer: {\n    files: FileList;\n  };\n};\n\nexport const FileUploadArea: React.FC<FileUploadAreaProps> = ({\n  isDragging,\n  error,\n  onDrop,\n  onDragOver,\n  onDragLeave,\n  isLoading = false,\n}) => {\n  return (\n    <Card className=\"border-2 border-dashed\">\n      <CardContent className=\"p-6\">\n        <div\n          className={`rounded-lg p-8 text-center cursor-pointer transition-colors duration-200\n            ${isLoading ? 'opacity-50 pointer-events-none' : ''}\n            ${isDragging\n              ? 'bg-emerald-50 dark:bg-emerald-950/50 border-emerald-500'\n              : 'bg-white dark:bg-gray-800 hover:bg-emerald-50 dark:hover:bg-emerald-950/30'\n            }\n            ${error ? 'border-red-500 bg-red-50 dark:bg-red-950/50' : ''}`}\n          onDrop={onDrop}\n          onDragOver={onDragOver}\n          onDragLeave={onDragLeave}\n          onClick={() => document.getElementById('file-input')?.click()}\n          role=\"button\"\n          tabIndex={0}\n          aria-label=\"Drop zone for configuration file\"\n          onKeyPress={(e: React.KeyboardEvent) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              document.getElementById('file-input')?.click();\n            }\n          }}\n        >\n          {isLoading ? (\n            <div className=\"animate-spin rounded-full h-8 w-8 border-4 border-emerald-500 border-t-transparent mx-auto\" />\n          ) : (\n            <input\n              type=\"file\"\n              id=\"file-input\"\n              className=\"sr-only\"\n              accept=\".gg5\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                const file = e.target.files?.[0];\n                if (file) {\n                  const fileList = new DataTransfer();\n                  fileList.items.add(file);\n                  const event: SimulatedDragEvent = {\n                    preventDefault: () => { },\n                    dataTransfer: { files: fileList.files }\n                  };\n                  onDrop(event as React.DragEvent<HTMLDivElement>);\n                }\n              }}\n              aria-label=\"Upload configuration file\"\n            />\n          )}\n          <Upload className=\"w-16 h-16 mx-auto mb-4 text-emerald-600 dark:text-emerald-400\" aria-hidden=\"true\" />\n          <p className=\"text-lg mb-2 font-medium text-gray-700 dark:text-gray-200\">\n            Drag and drop your configuration file here\n          </p>\n          <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n            (Only supports Green-GO <code>.gg5</code> configuration files)\n          </p>\n          {error && (\n            <p className=\"text-red-500 dark:text-red-400 mt-4\" role=\"alert\">{error}</p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; ","import React from 'react';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    // Log to console in production\n    console.error('Error caught by boundary:', error);\n    console.error('Error info:', errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"p-4 bg-red-50 dark:bg-red-900 text-red-900 dark:text-red-50 rounded-lg\">\n          <h2 className=\"text-lg font-semibold mb-2\">Something went wrong</h2>\n          <p className=\"text-sm\">{this.state.error?.message}</p>\n          <pre className=\"mt-2 text-xs overflow-auto\">\n            {this.state.error?.stack}\n          </pre>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n} ","'use client'\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { useTheme } from 'next-themes';\nimport { parseConfigFile } from '@/services/configParser';\nimport { Header } from './Header';\nimport { FileUploadArea } from './FileUploadArea';\nimport dynamic from 'next/dynamic';\nimport { ErrorBoundary } from './ErrorBoundary';\nimport type { ParsedConfig, User, Device } from '@/types/config';\n\n// Dynamic imports with proper typing\nconst ConfigDetails = dynamic(() =>\n  import('./ConfigDetails').then(mod => mod.ConfigDetails),\n  { ssr: false }\n);\n\nconst UserCard = dynamic(() =>\n  import('./UserCard').then(mod => mod.default),\n  { ssr: false }\n);\n\nconst UnassignedDevices = dynamic(() =>\n  import('./UnassignedDevices').then(mod => mod.UnassignedDevices),\n  { ssr: false }\n);\n\nconst ConfigParserApp: React.FC = () => {\n  const [parsedData, setParsedData] = useState<ParsedConfig | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [originalFileName, setOriginalFileName] = useState<string | null>(null);\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n    setError(null);\n    setIsLoading(true);\n\n    const file = e.dataTransfer.files[0];\n    if (!file) {\n      setIsLoading(false);\n      return;\n    }\n\n    console.log('File being processed:', {\n      name: file.name,\n      size: file.size,\n      type: file.type\n    });\n\n    if (!file.name.endsWith('.gg5')) {\n      setError('Please upload a Green-GO .gg5 configuration file');\n      setIsLoading(false);\n      return;\n    }\n\n    setOriginalFileName(file.name);\n\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      try {\n        console.log('File content length:', event.target?.result?.toString().length);\n        const parsed = parseConfigFile(event.target?.result as string);\n        setParsedData(parsed);\n      } catch (err) {\n        console.error('Error in file processing:', err);\n        setError(err instanceof Error ? err.message : 'Failed to parse file');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    reader.onerror = (error) => {\n      console.error('FileReader error:', error);\n      setError('Error reading file');\n      setIsLoading(false);\n    };\n\n    reader.readAsText(file);\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragging(false);\n  }, []);\n\n  const exportToCSV = useCallback(() => {\n    if (!parsedData) return;\n\n    const exportFileName = originalFileName\n      ? originalFileName.replace(/\\.(gg5|json)$/, '.csv')\n      : 'config_export.csv';\n\n    const headers = [\n      'User Name',\n      'User ID',\n      'Device Name',\n      'Device Type',\n      'Serial Number',\n      'Firmware',\n      'IP Address',\n      'MAC Address'\n    ].join(',');\n\n    const linkedDevicesRows = parsedData.users.flatMap((user: User) => {\n      const linkedDevices = parsedData.devices.filter((device: Device) => device.linkedToUser === user.id);\n\n      if (linkedDevices.length > 0) {\n        return linkedDevices.map((device: Device) => [\n          user.name,\n          user.id,\n          device.name,\n          device.typeName,\n          device.serialNumber,\n          device.firmware,\n          device.ipAddress,\n          device.macAddress\n        ].map(field => `\"${field || ''}\"`).join(','));\n      }\n\n      return [[\n        user.name,\n        user.id,\n        '', '', '', '', '', ''\n      ].map(field => `\"${field || ''}\"`).join(',')];\n    });\n\n    const unlinkedDevicesRows = parsedData.devices\n      .filter((device: Device) => device.linkedToUser === null)\n      .map((device: Device) => [\n        '', '',\n        device.name,\n        device.typeName,\n        device.serialNumber,\n        device.firmware,\n        device.ipAddress,\n        device.macAddress\n      ].map(field => `\"${field || ''}\"`).join(','));\n\n    const csvContent = [headers, ...linkedDevicesRows, ...unlinkedDevicesRows].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', exportFileName);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }, [parsedData, originalFileName]);\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const handleThemeChange = () => {\n    if (theme === 'dark') setTheme('light');\n    else if (theme === 'light') setTheme('system');\n    else setTheme('dark');\n  };\n\n  return (\n    <div className=\"min-h-full\" role=\"main\">\n      <Header\n        parsedData={parsedData}\n        onExport={exportToCSV}\n        onReset={() => {\n          setParsedData(null);\n          setError(null);\n        }}\n        theme={theme}\n        onThemeChange={handleThemeChange}\n        mounted={mounted}\n      />\n      <ErrorBoundary>\n        <div className=\"max-w-7xl mx-auto px-4 py-6\">\n          {!parsedData ? (\n            <FileUploadArea\n              isDragging={isDragging}\n              error={error}\n              onDrop={handleDrop}\n              onDragOver={handleDragOver}\n              onDragLeave={handleDragLeave}\n              isLoading={isLoading}\n            />\n          ) : (\n            <div className=\"space-y-6\">\n              <ConfigDetails configInfo={parsedData.configInfo} />\n\n              {parsedData.users.map(user => (\n                <UserCard\n                  key={user.id}\n                  user={user}\n                  devices={parsedData.devices}\n                />\n              ))}\n\n              <UnassignedDevices devices={parsedData.devices} />\n            </div>\n          )}\n        </div>\n      </ErrorBoundary>\n    </div>\n  );\n};\n\nexport default ConfigParserApp; ","import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", className)}\n      {...props}\n    />\n  )\n)\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n      {...props}\n    />\n  )\n)\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<HTMLHeadingElement, React.HTMLAttributes<HTMLHeadingElement>>(\n  ({ className, ...props }, ref) => (\n    <h3\n      ref={ref}\n      className={cn(\"text-2xl font-semibold leading-none tracking-tight\", className)}\n      {...props}\n    />\n  )\n)\nCardTitle.displayName = \"CardTitle\"\n\nconst CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n  )\n)\nCardContent.displayName = \"CardContent\"\n\nexport { Card, CardHeader, CardTitle, CardContent } ","\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\nconst TooltipRoot = TooltipPrimitive.Root\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\ninterface TooltipContentProps extends React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> {\n  sideOffset?: number;\n}\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  TooltipContentProps\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-gray-50 animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { TooltipRoot, TooltipTrigger, TooltipContent, TooltipProvider } ","export const DEFAULT_EMPTY_VALUE = '-';\n\nexport const DEVICE_TYPES = {\n  258: \"BPX Belt Pack\",\n  259: \"BPXSP Sports Belt Pack\",\n  321: \"WBPX Wireless Belt Pack\",\n  322: \"WBPXSP Wireless Sports Belt Pack\",\n  325: \"WBPRVCBRS Wireless Belt Pack\",\n  326: \"WBPRVCBRSSP Wireless Sports Belt Pack\",\n  384: \"Wallpanels Group\",\n  385: \"WPSP Wallpanel\",\n  386: \"WPHS Wallpanel\",\n  387: \"WPNA Wallpanel\",\n  388: \"WPX Wallpanel\",\n  513: \"MCD08 Desk Station\",\n  514: \"MCR12 Desk Station\",\n  515: \"MCD16 Desk Station\",\n  516: \"MCD24 Desk Station\",\n  517: \"MCD32 Desk Station\",\n  518: \"MCX Rack Station\",\n  519: \"MCXEXT Rack Channel Extension\",\n  520: \"MCXD Desk Station\",\n  521: \"MCXDEXT Desk Channel Extension\",\n  769: \"4W Interface\",\n  770: \"2W Interface\",\n  771: \"BRIDGE Interface\",\n  772: \"INTERFACEX (LCD)\",\n  773: \"INTERFACEX (TFT)\",\n  774: \"BRIDGEX Interface (LCD)\",\n  775: \"BRIDGEX Interface (TFT)\",\n  776: \"Q4WR Interface\",\n  777: \"DANTE Interface\",\n  897: \"BCN Beacon\",\n  898: \"WAA Antenna\",\n  899: \"SiRDX Interface\",\n  900: \"Si4WR Interface\",\n  901: \"Si2WR Interface\",\n  902: \"SiBR8RV Interface\",\n  903: \"STRIDE Antenna\"\n} as const;\n\nexport const TALK_MODES = {\n  0: \"Disabled\",\n  1: \"Momentary\",\n  2: \"Latch\",\n  3: \"Latch/Mom\"\n} as const;\n\nexport const LISTEN_MODES = {\n  0: \"Listen on talk\",\n  1: \"Listen on talk ignore\",\n  2: \"Islate ignore\",\n  3: \"Fixed\"\n} as const;\n\nexport const CHANNEL_MODES = {\n  0: \"Normal\",\n  1: \"No reply\",\n  2: \"Reply direct\",\n  3: \"Auto reply\",\n  4: \"Auto talk\",\n  5: \"Solo talk\",\n  6: \"GPIO control\",\n  7: \"Flex list\"\n} as const;\n\nexport const CALL_MODES = {\n  0: \"Disabled\",\n  1: \"Receive only\",\n  2: \"Send only\",\n  3: \"Send/Receive\"\n} as const;\n\nexport const REQUIRED_SETTINGS = [\n  'Name',\n  'configId',\n  'MulticastAddress',\n  'savedAtTimestamp',\n  'binaryTimestamp'\n] as const;\n\nexport const ERROR_MESSAGES = {\n  INVALID_FILE: 'Invalid configuration file structure',\n  INVALID_DATE: 'Invalid date',\n  FILE_READ_ERROR: 'Error reading file',\n  UNKNOWN_DEVICE_TYPE: 'Unknown Device Type',\n  UNKNOWN_USER: 'Unknown User',\n  UNKNOWN_GROUP: 'Unknown Group'\n} as const; \n","import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\n/**\n * Combines multiple class names using clsx and merges Tailwind classes using tailwind-merge\n * @param inputs - Class names to combine\n * @returns Merged class names string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Validates if a string is in the format \"DD-M-YYYY HH:mm:ss\"\n */\nexport const isValidConfigDateFormat = (dateString: string): boolean => {\n  if (!dateString) return false;\n\n  const pattern = /^\\d{1,2}-\\d{1,2}-\\d{4} \\d{2}:\\d{2}:\\d{2}$/;\n  if (!pattern.test(dateString)) return false;\n\n  const [datePart, timePart] = dateString.split(' ');\n  const [day, month, year] = datePart.split('-').map(Number);\n  const [hours, minutes, seconds] = timePart.split(':').map(Number);\n\n  // Validate ranges\n  return (\n    month >= 1 && month <= 12 &&\n    day >= 1 && day <= 31 &&\n    year >= 1970 &&\n    hours >= 0 && hours <= 23 &&\n    minutes >= 0 && minutes <= 59 &&\n    seconds >= 0 && seconds <= 59\n  );\n}; ","import {\n  ParsedConfig,\n  User,\n  Device,\n  ChannelAssignment,\n  Group,\n  UserDetails,\n  UserSpecialChannel,\n  DeviceProfile,\n  UserSettings,\n  FlexListEntry\n} from '@/types/config';\nimport { isValidConfigDateFormat } from '@/lib/utils';\nimport {\n  DEVICE_TYPES,\n  ERROR_MESSAGES,\n  REQUIRED_SETTINGS,\n  DEFAULT_EMPTY_VALUE\n} from '@/constants';\n\nexport const getDeviceTypeName = (typeId: number): string => {\n  return DEVICE_TYPES[typeId as keyof typeof DEVICE_TYPES] || ERROR_MESSAGES.UNKNOWN_DEVICE_TYPE;\n};\n\ninterface RawConfigData {\n  Settings?: {\n    Name: string;\n    configId: string;\n    MulticastAddress: string;\n    savedAtTimestamp: string;\n    binaryTimestamp: string;\n  };\n  State?: {\n    newBinary: number;\n    configChanged: number;\n    following: number;\n  };\n  Users?: {\n    keys: string[];\n    [key: string]: unknown;\n  };\n  Network?: {\n    keys: string[];\n    [key: string]: unknown;\n  };\n  Devices?: {\n    keys: string[];\n    [key: string]: unknown;\n  };\n  WirelessClients?: {\n    keys: string[];\n    [key: string]: unknown;\n  };\n  UsbDevices?: {\n    keys: string[];\n    [key: string]: unknown;\n  };\n  Groups?: {\n    keys: string[];\n    [key: string]: unknown;\n  };\n}\n\ninterface RawUserData {\n  Name: string;\n  Color: string;\n  UserId?: {\n    Type: number;\n    Id: string;\n  };\n  Channels?: Record<string, RawChannelData>;\n  DisplayName?: string;\n  SpecialChannels?: Record<string, UserSpecialChannel>;\n  DeviceProfiles?: Record<string, DeviceProfile>;\n  Settings?: UserSettings;\n  FlexList?: FlexListEntry[];\n}\n\ninterface RawDeviceData {\n  Name: string;\n  deviceType: number;\n  serialNumber: string;\n  firmwareName: string;\n  IpAddress: string;\n  macAddress: string;\n  UserId?: {\n    Type: number;\n    Id: string;\n  };\n}\n\ninterface RawWirelessDeviceData {\n  myId: string;\n  Name: string;\n  deviceType: number;\n  deviceId: string;\n  poolData?: {\n    rfId: string;\n  };\n}\n\ninterface RawDeviceAssignmentData {\n  myId: string;\n  UserId?: {\n    Type: number;\n    Id: number;  // Changed to number since user IDs are numbers\n  };\n}\n\ninterface RawUsbDeviceData {\n  deviceId: string;\n  serialNumber: number;\n  firmwareName: string;\n}\n\ninterface RawChannelData {\n  myId: string;\n  Assign: {\n    Type: number;\n    Id: string | number;\n  };\n  TalkMode: number;\n  ListenMode: number;\n  ChannelMode: number;\n  Listen: number;\n  Level: {\n    Value: number;\n    min: number;\n    max: number;\n  };\n  talkState: number;\n  CallMode: number;\n  Priority: number;\n}\n\ninterface RawGroupData {\n  myId: string;\n  Name: string;\n  Color: string;\n}\n\ninterface ConfigInfoData {\n  \"Configuration Name\": string;\n  \"Configuration ID\": string;\n  \"Multicast Address\": string;\n  \"Config Timestamp\": string;\n  \"Binary Timestamp\": string;\n  \"Unassigned Devices\": number;\n  state: {\n    newBinary: number;\n  };\n}\n\ninterface RawDeviceStatusData {\n  myId: string;\n  Name: string;\n  syncStatus: number;\n  macAddress: string;\n}\n\nconst formatConfigDate = (dateString: string): string => {\n  try {\n    // Input format: \"DD-M-YYYY HH:mm:ss\"\n    const [datePart, timePart] = dateString.split(' ');\n    const [day, month, year] = datePart.split('-');\n    const [hours, minutes, seconds] = timePart.split(':');\n\n    // Create date using numeric values\n    const date = new Date(\n      parseInt(year),\n      parseInt(month) - 1, // Months are 0-based in JS\n      parseInt(day),\n      parseInt(hours),\n      parseInt(minutes),\n      parseInt(seconds)\n    );\n\n    // Check if date is valid\n    if (isNaN(date.getTime())) {\n      console.error('Invalid date created from:', dateString);\n      return ERROR_MESSAGES.INVALID_DATE;\n    }\n\n    // Format the date\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      hour12: false\n    }).replace(',', '');\n\n  } catch (error) {\n    console.error('Error formatting date:', error, 'Input:', dateString);\n    return ERROR_MESSAGES.INVALID_DATE;\n  }\n};\n\nconst DEBUG = process.env.NODE_ENV !== 'production';\n\nexport const getPriorityName = (priority: number): string => {\n  const priorities = {\n    [-1]: \"Low\",\n    0: \"Normal\",\n    1: \"High\"\n  };\n  return priorities[priority as keyof typeof priorities] || \"Normal\";\n};\n\nexport function parseConfigFile(fileContent: string): ParsedConfig {\n  try {\n    const data = JSON.parse(fileContent) as RawConfigData;\n\n    if (DEBUG) {\n      console.log('Parsed data structure:', {\n        name: data.Settings?.Name,\n        id: data.Settings?.configId,\n        multicastAddress: data.Settings?.MulticastAddress,\n        timestamp: data.Settings?.savedAtTimestamp,\n        binaryTimestamp: data.Settings?.binaryTimestamp\n      });\n    }\n\n    // Validate required fields\n    const missingFields = REQUIRED_SETTINGS.filter(field => !data.Settings?.[field]);\n    if (missingFields.length > 0) {\n      console.error('Missing required fields:', missingFields);\n      throw new Error('Invalid configuration file structure');\n    }\n\n    // Validate date formats\n    const savedAtTimestamp = data.Settings?.savedAtTimestamp || '';\n    const binaryTimestamp = data.Settings?.binaryTimestamp || '';\n\n    if (!isValidConfigDateFormat(savedAtTimestamp)) {\n      console.warn('Invalid savedAtTimestamp format:', savedAtTimestamp);\n    }\n    if (!isValidConfigDateFormat(binaryTimestamp)) {\n      console.warn('Invalid binaryTimestamp format:', binaryTimestamp);\n    }\n\n    // Extract configuration details\n    const configInfo: ConfigInfoData = {\n      \"Configuration Name\": data.Settings?.Name || \"Unknown\",\n      \"Configuration ID\": data.Settings?.configId || \"Unknown\",\n      \"Multicast Address\": data.Settings?.MulticastAddress || \"Unknown\",\n      \"Config Timestamp\": formatConfigDate(savedAtTimestamp || \"Invalid Date\"),\n      \"Binary Timestamp\": formatConfigDate(binaryTimestamp || \"Invalid Date\"),\n      \"Unassigned Devices\": 0,\n      state: {\n        newBinary: data.State?.newBinary ?? 0\n      }\n    };\n\n    // Extract groups first since we need them for channel assignments\n    const groups = extractGroups(data.Groups ?? {});\n\n    // Extract users with channel assignments\n    const users = extractUsers(data.Users ?? {}, groups);\n\n    // Extract devices\n    const deviceAssignments = extractDeviceAssignments(data.Devices ?? {});\n\n    // Get both regular and wireless devices\n    const regularDevices = extractDevices(\n      data.Devices ?? {},\n      data.Network ?? {},\n      deviceAssignments\n    );\n    const wirelessDevices = extractWirelessDevices(\n      data.WirelessClients ?? {},\n      deviceAssignments,\n      data.UsbDevices ?? {}\n    );\n\n    // Combine all devices\n    const devices = [...regularDevices, ...wirelessDevices];\n\n    // Count unassigned devices\n    configInfo[\"Unassigned Devices\"] = devices.filter(device => device.linkedToUser === null).length;\n\n    return { configInfo, users, devices };\n  } catch (error: unknown) {\n    // Enhanced error logging\n    console.error('Error parsing config file:', error);\n    console.error('File content preview:', fileContent.substring(0, 200) + '...');\n\n    if (error instanceof Error) {\n      throw new Error(`Failed to parse config file: ${error.message}`);\n    }\n    throw new Error('Failed to parse config file');\n  }\n}\n\nconst extractGroups = (groups: Record<string, unknown>): Map<string, Group> => {\n  const groupsMap = new Map<string, Group>();\n\n  Object.entries(groups)\n    .filter(([key]) => key !== 'keys' && key !== 'badge')\n    .forEach(([id, groupData]) => {\n      const data = groupData as RawGroupData;\n      groupsMap.set(id, {\n        id,\n        name: data.Name,\n        color: data.Color?.toString() || '0'\n      });\n    });\n\n  return groupsMap;\n};\n\nconst extractUserDetails = (data: RawUserData): UserDetails | undefined => {\n  // If there's no meaningful data to extract, return undefined\n  if (!data.DisplayName &&\n    !data.SpecialChannels?.Program &&\n    (!data.DeviceProfiles || Object.keys(data.DeviceProfiles).length === 0) &&\n    !data.Settings?.Isolate &&\n    (!data.FlexList || data.FlexList.length === 0)) {\n    return undefined;\n  }\n\n  return {\n    DisplayName: data.DisplayName,\n    SpecialChannels: data.SpecialChannels && {\n      Program: data.SpecialChannels.Program\n    },\n    // Only include DeviceProfiles if it exists and has entries\n    ...(data.DeviceProfiles && Object.keys(data.DeviceProfiles).length > 0 && {\n      DeviceProfiles: data.DeviceProfiles\n    }),\n    ...(data.Settings && {\n      Settings: data.Settings\n    }),\n    ...(data.FlexList && data.FlexList.length > 0 && {\n      FlexList: data.FlexList\n    })\n  };\n};\n\nconst extractUsers = (\n  users: Record<string, unknown>,\n  groups: Map<string, Group>\n): User[] => {\n  return Object.entries(users)\n    .filter(([key]) => key !== 'keys' && key !== 'badge')\n    .map(([id, userData]) => {\n      const data = userData as RawUserData;\n\n      const channelAssignments: ChannelAssignment[] = [];\n\n      if (data.Channels) {\n        Object.entries(data.Channels)\n          .filter(([key]) => key !== 'keys')\n          .forEach(([channelNum, channelData]) => {\n            const assignment = channelData.Assign;\n            if (assignment && assignment.Type && assignment.Id) {\n              const targetId = assignment.Id.toString();\n              const isUser = assignment.Type === 1;\n              const targetName = isUser ?\n                (users[targetId] as RawUserData)?.Name || 'Unknown User' :\n                groups.get(targetId)?.name || 'Unknown Group';\n\n              channelAssignments.push({\n                type: isUser ? 'user' : 'group',\n                id: targetId,\n                name: targetName,\n                channelNumber: parseInt(channelNum),\n                talkMode: channelData.TalkMode,\n                listenMode: channelData.ListenMode,\n                channelMode: channelData.ChannelMode,\n                isListening: channelData.Listen === 1,\n                volume: channelData.Level?.Value ?? 0,\n                talkState: channelData.talkState,\n                callMode: channelData.CallMode,\n                priority: channelData.Priority\n              });\n            }\n          });\n      }\n\n      return {\n        id,\n        name: data.Name,\n        color: data.Color,\n        devices: [],\n        channelAssignments: channelAssignments.length > 0 ? channelAssignments : undefined,\n        details: extractUserDetails(data)\n      };\n    });\n};\n\nconst extractDeviceAssignments = (\n  devices: Record<string, unknown>\n): { [key: string]: string } => {\n  const assignments: { [key: string]: string } = {};\n\n  // Handle all devices (both regular and wireless)\n  Object.entries(devices)\n    .filter(([key]) => key !== 'keys' && key !== 'badge')\n    .forEach(([deviceId, deviceData]) => {\n      const data = deviceData as RawDeviceAssignmentData;\n      if (data.UserId && data.UserId.Type === 1) {\n        // For wired devices, we need to store both formats of the ID\n        // Store the full ID for wireless devices\n        assignments[deviceId] = data.UserId.Id.toString();\n        // Store the short ID for wired devices\n        const shortDeviceId = deviceId.slice(-6);\n        assignments[shortDeviceId] = data.UserId.Id.toString();\n      }\n    });\n\n  return assignments;\n};\n\nconst extractDevices = (\n  devices: Record<string, unknown>,\n  networkDevices: Record<string, unknown>,\n  deviceAssignments: { [key: string]: string }\n): Device[] => {\n  // Create a map of sync statuses from the Devices section\n  const syncStatuses = new Map<string, number>();\n  Object.entries(devices)\n    .filter(([key]) => key !== 'keys' && key !== 'badge')\n    .forEach(([, deviceData]) => {\n      const data = deviceData as RawDeviceStatusData;\n      if (data.macAddress) {\n        syncStatuses.set(data.macAddress, data.syncStatus);\n      }\n    });\n\n  return Object.entries(networkDevices)\n    .filter(([key]) => key !== 'keys' && key !== 'badge')\n    .map(([macAddress, deviceData]) => {\n      const data = deviceData as RawDeviceData;\n      const shortDeviceId = macAddress\n        .split('-')\n        .slice(-3)\n        .join('')\n        .toUpperCase();\n\n      return {\n        name: data.Name,\n        deviceType: data.deviceType,\n        typeName: getDeviceTypeName(data.deviceType),\n        serialNumber: data.serialNumber,\n        firmware: data.firmwareName,\n        ipAddress: data.IpAddress,\n        macAddress: data.macAddress,\n        linkedToUser: deviceAssignments[shortDeviceId] || null,\n        syncStatus: syncStatuses.get(data.macAddress) ?? 0\n      };\n    });\n};\n\nconst extractUsbDeviceInfo = (\n  usbDevices: Record<string, unknown>\n): Map<string, { serialNumber: string, firmware: string }> => {\n  const deviceInfo = new Map();\n\n  if (!usbDevices?.keys) return deviceInfo;\n\n  Object.entries(usbDevices)\n    .filter(([key]) => key !== 'keys')\n    .forEach(([, deviceData]) => {\n      const data = deviceData as RawUsbDeviceData;\n      if (data.deviceId && data.serialNumber) {\n        deviceInfo.set(data.deviceId, {\n          serialNumber: data.serialNumber.toString(),\n          firmware: data.firmwareName || DEFAULT_EMPTY_VALUE\n        });\n      }\n    });\n\n  return deviceInfo;\n};\n\nconst extractWirelessDevices = (\n  wirelessClients: Record<string, unknown>,\n  deviceAssignments: { [key: string]: string },\n  usbDevices: Record<string, unknown>\n): Device[] => {\n  if (!wirelessClients?.keys) return [];\n\n  // Get USB device information\n  const usbDeviceInfo = extractUsbDeviceInfo(usbDevices);\n\n  return Object.entries(wirelessClients)\n    .filter(([key]) => key !== 'keys')\n    .map(([deviceId, deviceData]) => {\n      const data = deviceData as RawWirelessDeviceData;\n\n      // Only create device if we have the minimum required data\n      if (!data.Name || !data.deviceType) {\n        console.warn(`Skipping wireless device ${deviceId} due to missing required data`);\n        return null;\n      }\n\n      // Get additional info from USB devices if available\n      const additionalInfo = usbDeviceInfo.get(deviceId);\n\n      return {\n        name: data.Name,\n        deviceType: data.deviceType,\n        typeName: getDeviceTypeName(data.deviceType),\n        serialNumber: additionalInfo?.serialNumber || DEFAULT_EMPTY_VALUE,\n        firmware: additionalInfo?.firmware || DEFAULT_EMPTY_VALUE,\n        ipAddress: DEFAULT_EMPTY_VALUE,     // No IP for wireless devices\n        macAddress: data.poolData?.rfId ?? deviceId,\n        linkedToUser: deviceAssignments[deviceId] || null\n      };\n    })\n    .filter((device): device is Device => device !== null);\n};\n\nexport function parseDeviceMacAddress(deviceData: Record<string, unknown>): string {\n  const macAddress = deviceData.macAddress as string;\n  return macAddress;\n} "],"names":["getBasePath","Header","parsedData","onExport","onReset","theme","onThemeChange","mounted","getThemeLabel","div","className","Image","src","alt","width","height","h1","TooltipProvider","role","aria-label","TooltipRoot","TooltipTrigger","asChild","button","onClick","FileDown","aria-hidden","TooltipContent","RotateCcw","title","getThemeIcon","Sun","SunMoon","Moon","FileUploadArea","isDragging","error","onDrop","onDragOver","onDragLeave","isLoading","Card","CardContent","document","getElementById","click","tabIndex","onKeyPress","e","key","input","type","id","accept","onChange","file","target","files","fileList","DataTransfer","items","add","preventDefault","event","dataTransfer","Upload","p","code","ErrorBoundary","React","getDerivedStateFromError","hasError","componentDidCatch","errorInfo","console","render","state","h2","message","pre","stack","props","children","constructor","ConfigDetails","dynamic","then","mod","ssr","UserCard","default","UnassignedDevices","setParsedData","useState","setError","ConfigParserApp","setIsDragging","originalFileName","setOriginalFileName","setTheme","useTheme","setMounted","setIsLoading","handleDrop","useCallback","log","name","size","endsWith","reader","FileReader","onload","result","toString","length","parsed","parseConfigFile","err","Error","onerror","readAsText","handleDragOver","handleDragLeave","exportToCSV","exportFileName","replace","blob","Blob","users","flatMap","linkedDevices","devices","filter","device","linkedToUser","user","map","typeName","serialNumber","firmware","ipAddress","macAddress","field","join","link","createElement","url","URL","createObjectURL","setAttribute","style","visibility","body","appendChild","removeChild","useEffect","handleThemeChange","configInfo","ref","cn","displayName","CardHeader","CardTitle","h3","TooltipPrimitive","sideOffset","DEFAULT_EMPTY_VALUE","CALL_MODES","ERROR_MESSAGES","INVALID_FILE","INVALID_DATE","FILE_READ_ERROR","UNKNOWN_DEVICE_TYPE","UNKNOWN_USER","UNKNOWN_GROUP","inputs","twMerge","clsx","isValidConfigDateFormat","dateString","test","datePart","timePart","split","day","month","year","Number","hours","minutes","seconds","getDeviceTypeName","DEVICE_TYPES","typeId","formatConfigDate","date","Date","parseInt","isNaN","getTime","toLocaleDateString","hour","minute","hour12","getPriorityName","priorities","priority","fileContent","data","JSON","parse","missingFields","REQUIRED_SETTINGS","Settings","savedAtTimestamp","binaryTimestamp","warn","Name","configId","MulticastAddress","newBinary","State","groups","extractGroups","Groups","extractUsers","Users","deviceAssignments","extractDeviceAssignments","Devices","regularDevices","extractDevices","Network","wirelessDevices","extractWirelessDevices","WirelessClients","UsbDevices","substring","groupsMap","Map","Object","entries","forEach","groupData","set","color","Color","extractUserDetails","DisplayName","SpecialChannels","Program","keys","DeviceProfiles","Isolate","FlexList","userData","channelAssignments","Channels","channelNum","channelData","assignment","Assign","Type","Id","targetId","isUser","targetName","get","push","channelNumber","talkMode","TalkMode","listenMode","ListenMode","channelMode","ChannelMode","isListening","Listen","volume","Level","Value","talkState","callMode","CallMode","Priority","undefined","details","assignments","deviceId","deviceData","UserId","shortDeviceId","slice","networkDevices","syncStatuses","syncStatus","toUpperCase","deviceType","firmwareName","IpAddress","extractUsbDeviceInfo","deviceInfo","usbDevices","wirelessClients","usbDeviceInfo","additionalInfo","poolData","rfId"],"sourceRoot":"","ignoreList":[]}