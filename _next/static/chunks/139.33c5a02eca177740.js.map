{"version":3,"file":"static/chunks/139.33c5a02eca177740.js","mappings":"uJAKA,IAAMA,EAAsBC,GACR,IAAXA,EACH,wEACA,+EAGAC,EAAoB,GACN,IAAXD,EAAe,cAAgB,UAG3BE,EAAaC,CAAAA,EAAAA,EAAAA,IAAAA,CAAIA,CAAkB,OAAC,QAAEC,CAAM,CAAE,GACzD,MACE,UAACC,MAAAA,CAAIC,UAAWC,CAAAA,EAAAA,EAAAA,EAAAA,CAAEA,CAChB,yFACsB,IAAtBH,EAAOI,UAAU,EAAU,kDAE3B,WAACH,MAAAA,CAAIC,UAAU,gCACb,WAACD,MAAAA,CAAIC,UAAU,mDACb,WAACD,MAAAA,WACC,UAACI,OAAAA,CAAKH,UAAU,4CAAmC,WACnD,UAACG,OAAAA,CAAKH,UAAU,wDACbF,EAAOM,IAAI,MAGhB,WAACL,MAAAA,CAAIC,UAAU,kDACb,UAACG,OAAAA,CAAKH,UAAU,oDACbF,EAAOO,QAAQ,GAElB,UAACC,EAAAA,EAAeA,CAAAA,UACd,WAACC,EAAAA,EAAWA,CAAAA,WACV,UAACC,EAAAA,EAAcA,CAAAA,CAACC,OAAO,aACrB,UAACN,OAAAA,CAAKH,UAAW,gDAAsF,OAAtCP,EAAmBK,EAAOI,UAAU,YAClGP,EAAkBG,EAAOI,UAAU,MAGxC,UAACQ,EAAAA,EAAcA,CAAAA,UACU,IAAtBZ,EAAOI,UAAU,CACd,uDACA,+DAOd,WAACH,MAAAA,CAAIC,UAAU,qDACb,WAACD,MAAAA,WACC,UAACI,OAAAA,CAAKH,UAAU,4CAAmC,UACnD,UAACG,OAAAA,CAAKH,UAAU,4CACbF,EAAOa,YAAY,MAGxB,WAACZ,MAAAA,WACC,UAACI,OAAAA,CAAKH,UAAU,4CAAmC,SACnD,UAACG,OAAAA,CAAKH,UAAU,4CACbF,EAAOc,QAAQ,MAGpB,WAACb,MAAAA,WACC,UAACI,OAAAA,CAAKH,UAAU,4CAAmC,SACnD,UAACG,OAAAA,CAAKH,UAAU,sDACbF,EAAOe,SAAS,MAGrB,WAACd,MAAAA,WACC,UAACI,OAAAA,CAAKH,UAAU,4CAAmC,UACnD,UAACG,OAAAA,CAAKH,UAAU,sDACbF,EAAOgB,UAAU,aAOhC,GAAG,EAEQC,WAAW,CAAG,qGCzElB,IAAMC,EAAsD,OAAC,SAAEC,CAAO,CAAE,GACvEC,EAAoBD,EAAQE,MAAM,CAACrB,GAAkC,OAAxBA,EAAOsB,YAAY,EAEtE,MACE,WAACC,EAAAA,EAAIA,CAAAA,CAACrB,UAAU,+FACd,UAACsB,EAAAA,EAAUA,CAAAA,UACT,WAACC,EAAAA,EAASA,CAAAA,CAACvB,UAAU,qDAA2C,qBAE9D,WAACG,OAAAA,CAAKH,UAAU,4EAAkE,IAC9EkB,EAAkBM,MAAM,CAAC,YAIjC,UAACC,EAAAA,EAAWA,CAAAA,UACV,UAAC1B,MAAAA,CAAIC,UAAU,sBACZkB,EAAkBQ,GAAG,CAAC5B,GACrB,UAACF,EAAAA,CAAUA,CAAAA,CAAyBE,OAAQA,GAA3BA,EAAOgB,UAAU,SAM9C,EAAE","sources":["webpack://_N_E/./src/components/DeviceCard.tsx","webpack://_N_E/./src/components/UnassignedDevices.tsx"],"sourcesContent":["import { memo } from 'react';\nimport { DeviceCardProps } from '@/types/ui';\nimport { TooltipProvider, TooltipRoot, TooltipTrigger, TooltipContent } from '@/components/ui/tooltip';\nimport { cn } from '@/lib/utils';\n\nconst getSyncStatusColor = (status: number) => {\n  return status === 1\n    ? 'bg-orange-200 text-orange-800 dark:bg-orange-900 dark:text-orange-200'\n    : 'bg-emerald-100 text-emerald-700 dark:bg-emerald-900/30 dark:text-emerald-400';\n};\n\nconst getSyncStatusText = (status: number) => {\n  return status === 1 ? 'Out of sync' : 'In sync';\n};\n\nexport const DeviceCard = memo<DeviceCardProps>(({ device }) => {\n  return (\n    <div className={cn(\n      'bg-gray-50 dark:bg-gray-700 p-4 rounded-lg border border-gray-200 dark:border-gray-600',\n      device.syncStatus === 1 && 'bg-orange-50/50 dark:bg-orange-950/50'\n    )}>\n      <div className=\"flex flex-col gap-2\">\n        <div className=\"flex justify-between items-start gap-4\">\n          <div>\n            <span className=\"text-gray-500 dark:text-gray-400\">Name: </span>\n            <span className=\"font-medium text-gray-900 dark:text-gray-100\">\n              {device.name}\n            </span>\n          </div>\n          <div className=\"flex items-center gap-2 flex-shrink-0\">\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">\n              {device.typeName}\n            </span>\n            <TooltipProvider>\n              <TooltipRoot>\n                <TooltipTrigger asChild>\n                  <span className={`text-xs px-2 py-0.5 rounded-full font-medium ${getSyncStatusColor(device.syncStatus)}`}>\n                    {getSyncStatusText(device.syncStatus)}\n                  </span>\n                </TooltipTrigger>\n                <TooltipContent>\n                  {device.syncStatus === 1\n                    ? 'Device configuration differs from user configuration'\n                    : 'Device configuration matches user configuration'\n                  }\n                </TooltipContent>\n              </TooltipRoot>\n            </TooltipProvider>\n          </div>\n        </div>\n        <div className=\"text-sm grid grid-cols-2 gap-x-4 gap-y-2\">\n          <div>\n            <span className=\"text-gray-500 dark:text-gray-400\">S/N: </span>\n            <span className=\"text-gray-900 dark:text-gray-100\">\n              {device.serialNumber}\n            </span>\n          </div>\n          <div>\n            <span className=\"text-gray-500 dark:text-gray-400\">FW: </span>\n            <span className=\"text-gray-900 dark:text-gray-100\">\n              {device.firmware}\n            </span>\n          </div>\n          <div>\n            <span className=\"text-gray-500 dark:text-gray-400\">IP: </span>\n            <span className=\"font-mono text-gray-900 dark:text-gray-100\">\n              {device.ipAddress}\n            </span>\n          </div>\n          <div>\n            <span className=\"text-gray-500 dark:text-gray-400\">MAC: </span>\n            <span className=\"font-mono text-gray-900 dark:text-gray-100\">\n              {device.macAddress}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n});\n\nDeviceCard.displayName = 'DeviceCard'; ","import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { DeviceCard } from './DeviceCard';\nimport { Device } from '@/types/config';\n\ninterface UnassignedDevicesProps {\n  devices: Device[];\n}\n\nexport const UnassignedDevices: React.FC<UnassignedDevicesProps> = ({ devices }) => {\n  const unassignedDevices = devices.filter(device => device.linkedToUser === null);\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-800 shadow-sm hover:shadow-md transition-shadow duration-200\">\n      <CardHeader>\n        <CardTitle className=\"text-lg text-gray-900 dark:text-gray-100\">\n          Unassigned Devices\n          <span className=\"text-sm text-emerald-600 dark:text-emerald-400 font-normal ml-2\">\n            ({unassignedDevices.length})\n          </span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4\">\n          {unassignedDevices.map(device => (\n            <DeviceCard key={device.macAddress} device={device} />\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}; "],"names":["getSyncStatusColor","status","getSyncStatusText","DeviceCard","memo","device","div","className","cn","syncStatus","span","name","typeName","TooltipProvider","TooltipRoot","TooltipTrigger","asChild","TooltipContent","serialNumber","firmware","ipAddress","macAddress","displayName","UnassignedDevices","devices","unassignedDevices","filter","linkedToUser","Card","CardHeader","CardTitle","length","CardContent","map"],"sourceRoot":"","ignoreList":[]}